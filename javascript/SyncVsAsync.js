// var exec = require('child_process').execSync;

// var Arr = [1,2,3,4,5,6,7,8,9,10];

// // Blocking code
// function Blocking( value ){
//   console.log(exec('node ./output.js ' + value + ' true').toString());
// }

// var i;
// for(i=0;i<Arr.length;i++){
//   Blocking(Arr[i]);
// }

// console.log();
// console.log();
// console.log('NON BLOCKING!!!');
// console.log();
// console.log();

// function NONBlocking( value ){
//   setTimeout(function(){
//     console.log(exec('node ./output.js ' + value).toString());
//   }, 20);
// }

// NON-Blocking code
// for(i=0;i<Arr.length;i++){
//   NONBlocking(Arr[i]);
// }

//Closure


// Callbacks

function MyAsyncFunction(value, cb){
  setTimeout(function(){
    cb(null, value);
  }, 2000);
}

MyAsyncFunction('Mauro likes feedback sometimes!', function( err, value ){
  if(!err) console.log(value);
});
// Hoisting and scoping examples - one works and the other not - WHY????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

// This works
MyAsyncFunction('Mauro likes feedback sometimes (2)!', MyCallbackFunction2);

function MyCallbackFunction2(err, value) {
  if (!err) console.log(value);
}

// This DOES NOT WORK 
MyAsyncFunction('Mauro likes feedback sometimes (2)!', x);
var x = function MyCallbackFunction( err, value ){
  if(!err) console.log(value);
}




// Promises

// Closure

// ES6 (async,)

// Recursive

// Api Request
